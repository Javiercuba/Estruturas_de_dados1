#+title: Hexadecimal
#+author: Javier Ernesto Lopez del real
#+email: javierernesto2000@gmail.com

Explicando o funcionamento do projeto. 

* Função main()
#+begin_src c
int main(void)
{
    node *PILHA = (node *)malloc(sizeof(node));  
    node *invertida = (node *)malloc(sizeof(node)); 
#+end_src c
- Alocando memoria na pilha original e na pilha que será
 invertida e transformada para hexadecimal.

#+begin_src c

    if (!PILHA)
    {
        printf("Sem memoria disponivel!\n");
        exit(1);
    }
}
#+end_src c
- Verifico se tem memoria disponivel.


#+begin_src c

    else
    {
        inicia(PILHA);
        inicia(invertida);
        int opt;

        do
        {
            opt = menu();
            opcao(PILHA, invertida, opt);
        } while (opt);

        free(PILHA);
        return 0;
    }
}
#+end_src c
- Se tiver memoria eu inicio as duas pilhas e abro o menu com a função "opcao".

* Funções "opcao" e "menu"
#+begin_src c
int menu(void)
{
    int opt;

    printf("Escolha a opcao\n");
    printf("0. Sair\n");
    printf("1. Zerar PILHA\n");
    printf("2. Exibir PILHA\n");
    printf("3. PUSH\n");
    printf("4. POP/DESEMPILHAR\n");
    printf("Opcao: ");
    scanf("%d", &opt);

    return opt;
}
#+end_src c


#+begin_src c

void opcao(node *PILHA, node *invertida, int op)
{
    node *tmp;
    switch (op)
    {
    case 0:
        exibe_int(PILHA);
        break;

    case 1:
        divide(PILHA, 44221);
        exibe_int(PILHA);
        break;

    case 2:
        tmp = pop(PILHA, invertida);
        if (tmp != NULL)
            printf("Retirado/Adicionado: %3d\n\n", tmp->num);
        break;

    default:
        printf("Comando invalido\n\n");
    }
}
#+end_src c
* Explicação de cada caso

** Caso 0 - Mostra na tela a pilha original.
#+begin_src c
void opcao(node *PILHA, node *invertida, int op)
{
    node *tmp;
    switch (op)
    {
    case 2:
        exibe_int(PILHA);
        break;
}
#+end_src c


** Caso 1 - A função =divide= insere na pilha original o resto das divisões, importante saber que o valor inserido está estatico.
#+begin_src c
void opcao(node *PILHA, node *invertida, int op)
{
    node *tmp;
    switch (op)
    {
   case 3:
        divide(PILHA, 12444556);
        exibe_int(PILHA);
        break;
}
#+end_src c


** Caso 2 - A função =pop= retorna e remove o ultimo elemento da pilha.
#+begin_src c
void opcao(node *PILHA, node *invertida, int op)
{
    node *tmp;
    switch (op)
    {
   case 4:
        tmp = pop(PILHA, invertida);
        if (tmp != NULL)
            printf("Retirado/Adicionado: %3d\n\n", tmp->num);
        break;
}
#+end_src c



* Execução do código
#+html: <p align="center"><img src="./capturar.jpg " /></p>
Como nos ja predefinimos o valor da variavel na função "divide" no =caso 3=, essa função ira inserir o resto de cada divisão por 16 desse valor na pilha usando a função "push" 
#+begin_src c
        divide(PILHA, 12444556);
#+end_src c

#+begin_src c
int divide(node *PILHA, int x) 
{
    if ((float)x / 16 > 0.01)
    {
        push(PILHA, x % 16); 
        divide(PILHA, x / 16);
    }
}
#+end_src c

Em seguida temos a função "desempilha" que tem a função de filtrar os elementos transformando para hexadecimal e 
inseri-los em uma nova pilha. 


#+begin_src c
char desempilha(node *PILHA, int x)
{
    char c = hexa(x);
    push(PILHA, c);
}
#+end_src c

A filtragem para hexa é feita pela função =hexa=, que retorna a variavel em =char=.

#+begin_src c

int hexa(int x)
{
    switch (x)
    {
    case 10:
        return 'A';
        break;
    case 11:
        return 'B';
        break;
    case 12:
        return 'C';
        break;
    case 13:
        return 'D';
        break;
    case 14:
        return 'E';
        break;
    case 15:
        return 'F';
        break;
    default:
        return x;
    }
}
#+end_src c

Para executar o desempilhamento chamei a função =pop= que vai removendo o ultimo valor da pilha
e em seguida chamo a função =desempilha= que vai inserir esse valor removido na nova pilha.
#+html: <p align="center"><img align="center" src="./Rodando.gif"  width="50%" height="60%" /> </p>

** Caso queira baixar o executável [[https://github.com/Javiercuba/Estruturas_de_dados1/releases/download/1.0/combinacao][Clique aqui]].

    
