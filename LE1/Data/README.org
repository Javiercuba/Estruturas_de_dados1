#+title: Data
#+author: Javier Ernesto Lopez del real
#+email: javierernesto2000@gmail.com

Explicando o funcionamento do projeto. 


* Esse foi o mais legal de fazer




** 

** Arquivo Data.h
No começo do arquivo, defino a struct Data:
#+begin_src c
typedef struct
{
    int dia;
    int mes;
    int ano;
    char data_formatada[9];
    int ultimo_dia_mes;

} Data;
#+end_src c
O parâmetros =ultimo_dia_mes= é importante para saber exatamente qual é o ultimo dia desse mês,
que vai servir para calcular o numero de dias.

** Funções Presentes em data.h

*** 1. Formata a data
Essa função tem como objetivo transforma a data para string formatada com os =/=.
Possuindo como parâmetro um struct do tipo data

#+begin_src C
int formata_data(Data *data)
{
    sprintf(data->data_formatada, "%d/%d/%d\n", data->dia, data->mes, data->ano);
    printf("%s", data->data_formatada);
}
#+end_src C


*** 1. Validando o ano da data
Essa função tem como objetivo validar se o ano da data é valido entre = 2021< data > 1000 =. 
Se o ano for valido, ele vai verificar se ele é bissexto ou não = tem que ser divisível por 4, mas não por 100= ou = divisível por 4, por 100 e por 400=.
- Se ele não for um ano valido, retorna 3
- Se ele for valido e não bissexto, retorna 2 
- Se ele for valido e bissexto, retorna 1 

#+begin_src C
int validacao_ano(Data *data)
{
    if ((*data).ano <= 2021 && (*data).ano > 1000) //VERIFICAR SE O ANO É VALIDO, ENTRE 2020 E 1000
    {
        if (((*data).ano % 4 == 0 && (*data).ano % 100 == 0 && (*data).ano % 400 == 0) || ((*data).ano % 4 == 0 && (*data).ano % 100 != 0)) //VERIFICAR SE O ANO É BISSEXTO
        {
            return 1; //RETORNA QUE O ANO É VALIDO E BISSEXTO
        }
        else
        {
            return 2; //RETORNA QUE O ANO É VALIDO E NÃO BISSEXTO
        }
    }
    else
    {
        return 3; //RETORNA QUE O ANO NÃO É VALIDO
    }
}
#+end_src C






**** 1. Ponteiro =*csvfile= recebe a função =fopen= que possibilita a abertura de um arquivo que no nosso caso é clientes.csv.
 line_size recebe uma representação do tamanho de dados.
 Nessa função enquanto o line_size for positivo, isso quer dizer que ainda existe algo para ser lido
 a função retornará cada linha presente no arquivo .csv 

** Funções Presentes em clientes.c

*** Chamando o arquivo.h 
#+begin_src C
#include "clientes.h"
#+end_src C

*** Função main
#+begin_src C
int main()
{
    Cliente cliente;

    printf("Qual é o codigo do cliente?\n");
    scanf("%d", &cliente.codigo);
   
    printf("Qual é o nome do cliente?\n");
    scanf("%s", cliente.nome);

    printf("Qual é o numero do cliente?\n");
    scanf("%d", &cliente.numero);

    printf("Qual é a data da primeira compra do cliente?\n");
    scanf("%s", cliente.data_primeira_compra);

    printf("Qual é a data da ultima compra do cliente?\n");
    scanf("%s", cliente.data_ultima_compra);

    printf("Qual é o valor da ultima compra do cliente?\n");
    scanf("%d", &cliente.valor_ultima_compra);

    printf("Qual é o endereço do cliente?\n");
    scanf("%s", cliente.endereco);
    printf("\n");
    printf("nome : %s\n", cliente.nome);
    printf("codigo: %d\n", cliente.codigo);
    printf("numero: %d\n", cliente.numero);
    printf("Endereço: %s\n", cliente.endereco);
    printf("Data da primeira compra: %s\n", cliente.data_primeira_compra);

    printf("\n");
    cria_cliente(&cliente);
}
#+end_src C
Na função main eu estou atribuindo valores a um variável do tipo cliente
e passando pela função =cria_cliente=



** Caso queira baixar o executável [[https://github.com/Javiercuba/Estruturas_de_dados1/releases/download/1.0/clientes][Clique aqui]].

    
