#+title: Clientes
#+author: Javier Ernesto Lopez del real
#+email: javierernesto2000@gmail.com

Explicando o funcionamento do projeto. 


* Existe uma tabela CSV com alguns dados já:
Servindo para poder facilitar.
#+begin_src csv
12323234,maria,ingstone,28/6/2020,9/11/2016,25.13
345812323496638,Max,69224640681,Funafuti,2/8/2014,11/10/2013,859.14
345812323496639,Evaleen,86433170873,Sofia,13/11/2014,7/4/2004,489.2
345812323496643,Celisse,83712902115,City of Halifax,30/6/2012,7/1/2012,311.34
345812323496644,Claresta,95046641085,Mérida,18/10/2010,5/5/2019,218.14
345812323496645,Dari,82213446120,Siem Reap,4/5/2000,25/11/2004,457.87
345812323496646,Kittie,38183713229,Pune,7/5/2012,29/7/2019,560.68
#+end_src csv



** 

** Arquivo Cilindro.h
No começo do arquivo, defino a struct Cliente:

#+begin_src c
typedef struct
{
    int codigo;
    int numero;
    char endereco[15];
    char nome[10];
    char data_primeira_compra[10];
    char data_ultima_compra[10];
    int valor_ultima_compra;

} Cliente;
#+end_src c

** Funções Presentes em clientes.h

*** 1. Listagem de Clientes

#+begin_src C
1  int lista_cliente()
2  {
3      FILE *csvfile = fopen("clientes.csv", "r+");
4      int numero_linhas = 1;
5      int posicao_linha = 0;
6      ssize_t line_size;
7      ssize_t line_buf_size = 0;
8      char *line_buf = NULL;
9      while (line_size >= 0)
10      {
11            line_size = getline(&line_buf, &line_buf_size, csvfile);
12            printf("linha[%02d]: %s", numero_linhas, line_buf);
13            numero_linhas++;
14      }
15
16      fclose(csvfile);
17 }
#+end_src C
**** 1. Ponteiro =*csvfile= recebe a função =fopen= que possibilita a abertura de um arquivo que no nosso caso é clientes.csv.
 line_size recebe uma representação do tamanho de dados.
 Nessa função enquanto o line_size for positivo, isso quer dizer que ainda existe algo para ser lido.
 A função retornará cada linha presente no arquivo .csv 




*** 2. Calcula área lateral do cilindro
Essa função recebe dois parâmetros:
1. Struct do tipo =cilindro= 
2. Struct do tipo =formula=
=formula.area_lateral= recebe o resultado do cálculo da arela lateral de um cilindro (=raio * pi * altura=)
#+begin_src c++
int calcula_lateral(cilindro c, formula *p)
{
    (*p).area_lateral = c.raio * 3.14 * c.altura;
}
#+end_src c++


*** 3. Calcula volume do cilindro
Essa função recebe dois parâmetros:
1. Struct do tipo =cilindro= 
2. Struct do tipo =formula=
=formula.volume= recebe o resultado do cálculo do volume de um cilindro (=raio^2 * pi * altura=)
#+begin_src C
int calcula_volume(cilindro c, formula *p)
{
    (*p).volume = c.raio * c.raio * 3.14 * c.altura;
}
#+end_src C


*** 4. Calcula área total do cilindro
Essa função recebe um parâmetro:
1. Struct do tipo =formula=
=formula.area_total= recebe o resultado do cálculo da área de um cilindro =(2 * Area da base) + (2 * Area Lateral)=
#+begin_src C
int calcula_area_total(formula *p)
{
    (*p).area_total = (2 * (*p).area_base) + (2 * (*p).area_lateral);
}
#+end_src C


*** 5. Atribui valores de raio e altura ao cilindro
Essa função recebe três parâmetros:
1. Struct do tipo =cilindro=
2. int que representa o =raio=
3. int que representa a =altura=
=cilindro.raio= e =cilindro.altura= recebem valores
#+begin_src C
void atribui_valores(cilindro *c, int raio, int altura)
{
    (*c).raio = raio;
    (*c).altura = altura;
}

#+end_src C



*** 6. Imprime resultados da area e volume do cilindro
Essa função recebe um parâmetros:
1. Struct do tipo =formula=
 Imprimindo a =formula.area_total= e o =formula.volume=

#+begin_src C
void ImprimeResultado(formula resultado)
{
    printf("Area do Cilindro = %.2f\n", resultado.area_total);
    printf("Volume do Cilindro = %.2f\n", resultado.volume);
}
#+end_src C


** Arquivo cilindro.c
** Chamando o cilindro.h criado.
   
#+begin_src C
#include "cilindro.h"
#+end_src C
** Usando todas as funções na main
   
#+begin_src C
int main()
{

    cilindro c;   //VARIAVEL DO TIPO "cilindro"
    formula area; //VARIAVEL DO TIPO "formula"
    
    printf("Atribuir valores de raio e altura manualmente\n");
    atribui_valores(&c, rand() % 100 /* raio*/, rand() % 100 /* altura*/); //ATRIBUINDO OS VALORES ALEATORIAMENTE
    printf("O valor do raio é %.1f, e a altura é %.1f\n", c.raio, c.altura);
    calcula_base(c, &area);    //CALCULO DA BASE POR PASSAGEM DE REFERENCIA
    calcula_lateral(c, &area); //CALCULO DA LATERAL POR PASSAGEM DE REFERENCIA
    calcula_volume(c, &area);  //CALCULO DO VOLUME
    calcula_area_total(&area); //CALCULO DA AREA TOTAL

    ImprimeResultado(area);
}

#+end_src C


** Caso queira baixar o executável [[https://github.com/Javiercuba/Estruturas_de_dados1/releases/download/1.0/cilindro][Clique aqui]].

    
